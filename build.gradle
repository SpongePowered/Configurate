import org.jetbrains.gradle.ext.ActionDelegationConfig

import static org.eclipse.jgit.lib.Repository.shortenRefName

plugins {
    alias(libs.plugins.kotlin) apply false
    alias(libs.plugins.dokka) apply false
    alias(libs.plugins.detekt) apply false
    alias(libs.plugins.aggregateJavadoc)
    alias(libs.plugins.gitPublish)
    alias(libs.plugins.ideaExt)
    alias(libs.plugins.indra.git)
    alias(libs.plugins.indra.sonatype)
    alias(libs.plugins.nexusPublish)
    id 'java-base'
    id 'org.spongepowered.configurate.build.base'
}

idea.project.settings {
    delegateActions {
        delegateBuildRunToGradle = false
        testRunner = ActionDelegationConfig.TestRunner.PLATFORM
    }
}

tasks.named('aggregateJavadoc').configure {
    def gradleJdk = JavaVersion.current()
    // at least java 11, but not 12 (java 12 is broken for some reason :( )
    if (gradleJdk < JavaVersion.VERSION_11 || gradleJdk == JavaVersion.VERSION_12) {
        javadocTool.set(javaToolchains.javadocToolFor { this.languageVersion.set(JavaLanguageVersion.of(11)) })
    }

    configurate.applyCommonAttributes(it)
    title = "Configurate $version (all modules)"

    def excludedProjects = ["examples"].collect {
        project(":$it").projectDir.toPath().toAbsolutePath()
    }
    exclude {
        excludedProjects.find { path -> it.file.toPath().toAbsolutePath().startsWith(path) } != null
    }

    options.addBooleanOption("Xdoclint:-missing", true)
    options.links("https://docs.oracle.com/javase/8/docs/api/")
    if (gradleJdk > JavaVersion.VERSION_1_8 && gradleJdk < JavaVersion.VERSION_12) {
        options.addBooleanOption("-no-module-directories", true)
    }
}

tasks.register('test') {
    def vendor = gradle.includedBuild("configurate-vendor")
    // dependsOn(vendor.task(":snakeyaml:test")) // tests fail currently
    dependsOn(vendor.task(":typesafe-config:test"))
}
tasks.check {
    dependsOn('test')
}

gitPublish {
    def repo = indraGit.git()
    if (repo != null) {
        repo.remoteList().call().find { config -> config.name == "origin" }?.with { remote ->
            repoUri.set((remote.pushURIs.find() ?: remote.URIs.first()).toPrivateString())
            referenceRepoUri.set(remote.URIs.first().toPrivateString())
        }
    }

    branch = "gh-pages"
    contents {
        from("src/site") {
            def versionProvider = { 
                ([project.version as String] + indraGit.tags().collect { tag -> shortenRefName(tag.name) }.reverse())
                    .unique()
                    .findAll { tag -> repoDir.get().dir(tag).getAsFile().exists() || tag == project.version }
            }
            expand project: project, versions: versionProvider
        }
        from(tasks.aggregateJavadoc) {
            into("$version/apidocs")
        }
    }

    preserve {
        include(".gitattributes")
        include("**/") // include everything in directories
        exclude("/*.html")
    }
}
