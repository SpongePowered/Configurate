import groovy.xml.XmlSlurper

plugins {
    alias libs.plugins.gitpatcher
    alias libs.plugins.spotless apply false
}

gitPatcher.patchedRepos {
    'snakeyaml' {
        submodule = "snakeyaml-upstream"
        target = file("snakeyaml")
        patches = file("snakeyaml-patches")
    }
    'typesafeConfig' {
        submodule = "typesafe-config-upstream"
        target = file("typesafe-config")
        patches = file("typesafe-config-patches")
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.diffplug.spotless'

    group = "configurate.thirdparty"
    version = "version-from-submodule"

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(11))
        }
    }
}

def disableAutoPatchApply = providers.gradleProperty("vendor.disableAutoPatchApply")
    .map { it.toBoolean() }.orElse(false).get()
if (disableAutoPatchApply) {
    println("Compilation tasks will not trigger patch apply; vendor.disableAutoPatchApply=true")
}

project(":snakeyaml") {
    def mavenPom = project.file("../snakeyaml-upstream/pom.xml")
    if (mavenPom.exists()) {
        def document = new XmlSlurper().parse(mavenPom)
        def properties = document.properties.'*'.collectEntries { Map.entry(it.name().replaceAll('\\.', '__'), it.text()) }

        def scopes = [
            test    : 'testImplementation',
            compile : 'implementation',
            runtime : 'runtimeOnly',
            provided: 'compileOnly'
        ]

        dependencies {
            def templateEngine = new groovy.text.SimpleTemplateEngine()
            def dependencies = document.dependencies.dependency
            dependencies.each { dep ->
                def group = dep.groupId
                def artifact = dep.artifactId
                def version = templateEngine.createTemplate(dep.version.text().replaceAll('\\.', '__')).make(properties).toString().replaceAll('__', '.')
                def configuration = scopes[dep.scope]
                if (configuration != null) {
                    add(configuration, "$group:$artifact:$version")
                    if (configuration == 'testImplementation') {
                        add('testAnnotationProcessor', "$group:$artifact:$version")
                    }
                }
            }
        }
    }

    spotless {
        java {
            targetExclude 'src/main/java9/**' // upstream doesn't format this for some reason
            eclipse()
                .configFile('../snakeyaml-upstream/src/etc/eclipse-java-google-style.xml')
        }
    }

    def applyPatches = rootProject.tasks.named("applySnakeyamlPatches")
    tasks.withType(JavaCompile).configureEach {
        options.release.set(8)
        if (!disableAutoPatchApply) {
            dependsOn applyPatches
        }
    }
    tasks.withType(ProcessResources).configureEach {
        if (!disableAutoPatchApply) {
            dependsOn applyPatches
        }
    }
    spotlessJava {
        if (!disableAutoPatchApply) {
            dependsOn applyPatches
        }
    }

    tasks.named("test", Test) {
        environment(
            "EnvironmentKey1": "EnvironmentValue1",
            "environmentEmpty": ""
        )
        filter {
            // needs classpath provided via expansions, doesn't seem to be easily doable with the maven-style property names
            excludeTest("org.yaml.snakeyaml.issues.issue318.ContextClassLoaderTest", null)
        }
    }

    // Set up multi-release jar
    sourceSets {
        java9 { SourceSet set ->
            set.compileClasspath += main.compileClasspath
            set.runtimeClasspath += main.runtimeClasspath
            set.java.setSrcDirs(['src/main/java9'])
        }
    }

    dependencies {
        java9Implementation sourceSets.main.output
    }

    jar {
        from(sourceSets.java9.output) {
            into 'META-INF/versions/9/'
            exclude 'module-info.class' // not used for our purposes
        }
        manifest {
            attributes 'Multi-Release': 'true'
        }
    }

    compileJava9Java {
        options.release = 9
        options.compilerArgs += "--patch-module=org.yaml.snakeyaml=${sourceSets.main.output.classesDirs.asPath}"
    }
}

project(":typesafe-config") {
    plugins.apply('scala')

    sourceSets {
        extraTestResources {
            resources {
                srcDir("../test-lib/src/test/resources")
            }
        }
    }

    dependencies {
        // something breaks if we only add to testImplementation
        implementation("org.scala-lang:scala-library:2.12.18")

        testImplementation("junit:junit:4.13.2")
        testImplementation("net.liftweb:lift-json_2.12:3.3.0")
    }

    def applyPatches = rootProject.tasks.named("applyTypesafeConfigPatches")

    tasks.withType(JavaCompile).configureEach {
        options.release.set(8)
        if (!disableAutoPatchApply) {
            dependsOn applyPatches
        }
    }

    tasks.withType(ScalaCompile).configureEach {
        if (!disableAutoPatchApply) {
            dependsOn applyPatches
        }
        options.encoding = "UTF-8"
        scalaCompileOptions.additionalParameters.add(
            "-target:jvm-1.8"
        )
    }

    tasks.withType(ProcessResources).configureEach {
        if (!disableAutoPatchApply) {
            dependsOn applyPatches
        }
    }

    tasks.test {
        classpath.from(sourceSets.extraTestResources.output)
        // from build.sbt
        environment([
            "testList.0"                                                  : "0",
            "testList.1"                                                  : "1",
            "CONFIG_FORCE_b"                                              : "5",
            "CONFIG_FORCE_testList_0"                                     : "10",
            "CONFIG_FORCE_testList_1"                                     : "11",
            "CONFIG_FORCE_42___a"                                         : "1",
            "CONFIG_FORCE_a_b_c"                                          : "2",
            "CONFIG_FORCE_a__c"                                           : "3",
            "CONFIG_FORCE_a___c"                                          : "4",
            "CONFIG_FORCE_akka_version"                                   : "foo",
            "CONFIG_FORCE_akka_event__handler__dispatcher_max__pool__size": "10",
            "SECRET_A"                                                    : "A", // ConfigTest.renderShowEnvVariableValues
            "SECRET_B"                                                    : "B", // ConfigTest.renderShowEnvVariableValues
            "SECRET_C"                                                    : "C" // ConfigTest.renderShowEnvVariableValues
        ])
    }
}
