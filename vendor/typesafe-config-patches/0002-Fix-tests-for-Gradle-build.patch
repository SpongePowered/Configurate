From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jason Penilla <11360596+jpenilla@users.noreply.github.com>
Date: Tue, 7 Nov 2023 13:40:03 -0700
Subject: [PATCH] Fix tests for Gradle build


diff --git a/config/src/test/scala/com/typesafe/config/impl/ConfigTest.scala b/config/src/test/scala/com/typesafe/config/impl/ConfigTest.scala
index 350af6f9e9256a34dcac7f22d651299a570bfaba..6e51d2c72effff2d3294077224153e3fc1b7bca0 100644
--- a/config/src/test/scala/com/typesafe/config/impl/ConfigTest.scala
+++ b/config/src/test/scala/com/typesafe/config/impl/ConfigTest.scala
@@ -881,25 +881,25 @@ class ConfigTest extends TestUtils {
         val o1 = conf.getValue("ints.fortyTwo").origin()
         // the checkout directory would be in between this startsWith and endsWith
         assertTrue("description starts with resource '" + o1.description + "'", o1.description.startsWith("test01.conf @"))
-        assertTrue("description ends with url and line '" + o1.description + "'", o1.description.endsWith("/config/target/test-classes/test01.conf: 3"))
+        assertTrue("description ends with url and line '" + o1.description + "'", o1.description.endsWith("/config/build/resources/test/test01.conf: 3"))
         assertEquals("test01.conf", o1.resource)
-        assertTrue("url ends with resource file", o1.url.getPath.endsWith("/config/target/test-classes/test01.conf"))
+        assertTrue("url ends with resource file", o1.url.getPath.endsWith("/config/build/resources/test/test01.conf"))
         assertEquals(3, o1.lineNumber)
 
         val o2 = conf.getValue("fromJson1").origin()
         // the checkout directory would be in between this startsWith and endsWith
         assertTrue("description starts with json resource '" + o2.description + "'", o2.description.startsWith("test01.json @"))
-        assertTrue("description of json resource ends with url and line '" + o2.description + "'", o2.description.endsWith("/config/target/test-classes/test01.json: 2"))
+        assertTrue("description of json resource ends with url and line '" + o2.description + "'", o2.description.endsWith("/config/build/resources/test/test01.json: 2"))
         assertEquals("test01.json", o2.resource)
-        assertTrue("url ends with json resource file", o2.url.getPath.endsWith("/config/target/test-classes/test01.json"))
+        assertTrue("url ends with json resource file", o2.url.getPath.endsWith("/config/build/resources/test/test01.json"))
         assertEquals(2, o2.lineNumber)
 
         val o3 = conf.getValue("fromProps.bool").origin()
         // the checkout directory would be in between this startsWith and endsWith
         assertTrue("description starts with props resource '" + o3.description + "'", o3.description.startsWith("test01.properties @"))
-        assertTrue("description of props resource ends with url '" + o3.description + "'", o3.description.endsWith("/config/target/test-classes/test01.properties"))
+        assertTrue("description of props resource ends with url '" + o3.description + "'", o3.description.endsWith("/config/build/resources/test/test01.properties"))
         assertEquals("test01.properties", o3.resource)
-        assertTrue("url ends with props resource file", o3.url.getPath.endsWith("/config/target/test-classes/test01.properties"))
+        assertTrue("url ends with props resource file", o3.url.getPath.endsWith("/config/build/resources/test/test01.properties"))
         // we don't have line numbers for properties files
         assertEquals(-1, o3.lineNumber)
     }
diff --git a/config/src/test/scala/com/typesafe/config/impl/TestUtils.scala b/config/src/test/scala/com/typesafe/config/impl/TestUtils.scala
index d33e215fe2c325343713604c7584d723538e21fe..353f17b67d969addc607af958e4a53978aedaa81 100644
--- a/config/src/test/scala/com/typesafe/config/impl/TestUtils.scala
+++ b/config/src/test/scala/com/typesafe/config/impl/TestUtils.scala
@@ -873,7 +873,7 @@ abstract trait TestUtils {
     }
 
     protected def withScratchDirectory[T](testcase: String)(body: File => T): Unit = {
-        val target = new File("target")
+        val target = new File("build/resources/test")
         if (!target.isDirectory)
             throw new RuntimeException(s"Expecting $target to exist")
         val suffix = java.lang.Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current.nextInt)
