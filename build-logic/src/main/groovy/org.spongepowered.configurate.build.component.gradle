import com.diffplug.gradle.spotless.FormatExtension
import de.thetaphi.forbiddenapis.gradle.CheckForbiddenApis
import net.kyori.indra.util.Versioning
import org.eclipse.jgit.lib.Repository
import org.gradle.api.attributes.java.TargetJvmVersion

plugins {
    id "org.spongepowered.configurate.build.base"
    id "org.spongepowered.configurate.build.publishing"
    id "net.kyori.indra"
    id "net.kyori.indra.checkstyle"
    id "net.kyori.indra.crossdoc"
    id "net.ltgt.errorprone"
    id "me.champeau.gradle.japicmp"
    id "de.thetaphi.forbiddenapis"
    id 'com.diffplug.eclipse.apt'
    id 'com.diffplug.spotless'
    id 'pmd'
}

configurations.configureEach {
    resolutionStrategy {
        failOnDynamicVersions()
    }
}

/**
 * Fix metadata on Maven artifacts to properly handle rc/beta/alpha versions.
 *
 * These should not be detected as releases -- but are, sadly.
 */
@CacheableRule
class CorrectlyClassifyMilestonesRule implements ComponentMetadataRule {
    private static final def notActuallyReleaseStatus = ~/rc|beta|alpha|(-M\\d+$)/

    public void execute(final ComponentMetadataContext context) {
        context.details.with {
            def version = id.version

            if (status == "release" && version =~ notActuallyReleaseStatus) {
                status = "milestone"
            }
        }
    }
}

dependencies {
    components {
        all(CorrectlyClassifyMilestonesRule)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.errorprone {
        enabled.set(javaCompiler.map { it.metadata.languageVersion.asInt() >= 9 }.orElse(JavaVersion.current().java9Compatible))
        disable('CanIgnoreReturnValueSuggester')
        /* if (!name.toLowerCase().contains("test")) {
            nullaway {
                severity.set(CheckSeverity.ERROR)
                annotatedPackages.add("org.spongepowered.configurate")
                excludedFieldAnnotations.add("org.checkerframework.checker.nullness.qual.MonotonicNonNull")
                treatGeneratedAsUnannotated.set(true)
            }
        }*/
    }
    options.compilerArgs << "-Xlint:-processing"
}

tasks.withType(Javadoc).configureEach {
    if (options instanceof StandardJavadocDocletOptions) {
        options.links(
            "https://lightbend.github.io/config/latest/api/",
            "https://fasterxml.github.io/jackson-core/javadoc/2.10/",
            // "https://javadocs.dev/org.checkerframework/checker-qual/${libs.versions.checkerQual.get()}/",
            // "https://javadocs.dev/io.leangen.geantyref/geantyref/${libs.versions.geantyref.get()}/"
        )
        options.linkSource()
    }
    // applyCommonAttributes()
}

indraCrossdoc {
    baseUrl().set(providers.gradleProperty("javadocPublishRoot"))
    nameBasedDocumentationUrlProvider {
        projectNamePrefix = "configurate-"
    }
}

dependencies {
    // error-prone compiler
    compileOnlyApi(libs.errorprone.annotations)
    errorprone(libs.errorprone)
    // errorprone("com.uber.nullaway:nullaway:0.8.0")

    // Testing
    testImplementation(libs.assertj.core)
    testImplementation(platform(libs.junit.bom))
    testImplementation(libs.junit.api)
    testRuntimeOnly(libs.junit.engine)
    testRuntimeOnly(libs.junit.launcher)
}

configurations {
    runtimeClasspath { shouldResolveConsistentlyWith(compileClasspath) }
}

// Apply a license header
def spotlessCommon = { FormatExtension f ->
    f.toggleOffOn("@formatter:off", "@formatter:on")
    f.indentWithSpaces()
    f.endWithNewline()
    f.trimTrailingWhitespace()
}

spotless {
    java {
        def lineSep = System.lineSeparator()
        File contents = rootProject.file('LICENSE_HEADER')
        def licenseText = "/*" + lineSep + contents.readLines('utf-8')
          .collect { (" * " + it).stripTrailing() }
          .join(lineSep) + lineSep + " */"

        licenseHeader(licenseText)
        targetExclude 'generated/**'
        targetExclude 'src/main/java/generated/**'
        importOrderFile rootProject.file('.spotless/configurate.importorder')
        spotlessCommon(it)
    }
    groovyGradle {
        importOrderFile rootProject.file('.spotless/configurate.importorder')
        spotlessCommon(it)
    }
}

// configure ktlint
plugins.withId('org.jetbrains.kotlin.jvm') {
    spotless {
        kotlin {
            targetExclude 'generated/**'

            def lineSep = System.lineSeparator()
            File contents = rootProject.file('LICENSE_HEADER')
            def licenseText = "/*" + lineSep + contents.readLines('utf-8')
              .collect { (" * " + it).stripTrailing() }
              .join(lineSep) + lineSep + " */"
            licenseHeader(licenseText)

            ktfmt(libs.versions.ktfmt.get()).kotlinlangStyle()
            spotlessCommon(it)
        }
        plugins.withId("io.gitlab.arturbosch.detekt") {
            tasks.named("detekt").configure {
                jvmTarget = Versioning.versionString(indra.javaVersions().target().get())
            }
        }
    }

    tasks.named('copyJavadoc') {
        enabled = false
    }
}

// Set up automatic module name
tasks.jar {
    manifest.attributes["Automatic-Module-Name"] = "${project.group}.configurate.${project.name.replace('-', '.')}"
}

// Configure target versions
indra {
    javaVersions() {
        testWith(8, 11, 17)
        minimumToolchain(17)
    }
}

// Don't compile AP-generated sources from within IDE
// IntelliJ puts its output *within* the Gradle source root.....................

sourceSets.configureEach {
    tasks.named(compileJavaTaskName, JavaCompile) {
        exclude("generated/**")
    }
}
tasks.withType(Checkstyle).configureEach {
    exclude("generated/**")
}
tasks.withType(Pmd).configureEach {
    exclude("generated/**")
}

plugins.withId('eclipse') {
    eclipse {
        project {
            resourceFilter {
                appliesTo = 'FOLDERS'
                type = 'EXCLUDE_ALL'
                matcher {
                    id = 'org.eclipse.ui.ide.multiFilter'
                    arguments = '1.0-name-matches-true-false-generated'
                }
            }
        }
    }
}

// Forbidden API validation
forbiddenApis {
    bundledSignatures = ["jdk-unsafe", "jdk-deprecated"]
    failOnMissingClasses = false
}

tasks.withType(CheckForbiddenApis).configureEach {
    targetCompatibility = Math.min(indra.javaVersions().actualVersion().get(), 17).toString() // todo: forbidden apis needs J16 sigs
}

// Checkstyle (based on Sponge config)
// We have the checkstyle version exposed as a property for use in checkstyle's own CI
// do not modify the checkstyle configuration without an understanding of how they test against Configurate
dependencies {
    checkstyle(libs.stylecheck)
}

if (hasProperty('checkstyleVersion')) {
    indra.checkstyle().set("$checkstyleVersion")
} else {
    indra.checkstyle().set(libs.versions.checkstyle.get())
}

pmd {
    consoleOutput = true
    incrementalAnalysis = true
    ruleSetConfig = resources.text.fromFile(rootProject.file(".pmd/rules.xml"))
    toolVersion = libs.versions.pmd.get()
}


// API diff viewer

def apiDiffPrevious = configurations.register("apiDiffPrevious") {
    canBeConsumed = false
    canBeResolved = true
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_API))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
        attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, indra.javaVersions().target().get())
        attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
    }

    defaultDependencies {
        // create based on git's previous tag
        def tags = indraGit.tags()
        if (tags) {
            add(project.dependencies.create("$group:configurate-${project.name}:${Repository.shortenRefName(tags.last().name)}"))
        }
    }
}

def apiDiffPreviousArchive = configurations.register("apiDiffPreviousArchive") {
    canBeResolved = true
    transitive = false
    extendsFrom(apiDiffPrevious.get())
    visible = false
}

tasks.register("apiDiff", me.champeau.gradle.japicmp.JapicmpTask) {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = "Generate an API diff between the current source and the last tagged version."
    // Old artifact: output of old japicmp
    oldClasspath.from(apiDiffPrevious)
    oldArchives.from(apiDiffPreviousArchive)
    // New: Current compile classpath and api output
    newClasspath.from(configurations.compileClasspath)
    newArchives.from(configurations.apiElements.outgoing.artifacts.files)
    ignoreMissingClasses = true // TODO: Doesn't seem to respect the classpath parameters

    onlyModified = true
    htmlOutputFile = layout.buildDirectory.file("reports/api-diff-long.html")

    richReport {
        title = "${rootProject.name} API difference report for ${project.name}"
        reportName = "api-diff.html"
    }
}
