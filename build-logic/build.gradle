import com.diffplug.gradle.spotless.FormatExtension

plugins {
    id 'groovy-gradle-plugin'
    alias(libs.plugins.spotless)
    id 'codenarc'
}

def javaTarget = 11
java {
    def javaVersion = JavaVersion.toVersion(javaTarget)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(javaTarget)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.release = javaTarget
}

dependencies {
    constraints {
        implementation(libs.build.japicmp) {
            because "Use a newer version than the japicmp gradle plugin provides"
        }
    }
    implementation gradleApi()
    api libs.build.indra
    api libs.build.indra.crossdoc
    api libs.build.spotless
    api libs.build.errorprone
    api libs.build.nullaway
    api libs.build.japicmp.plugin
    api libs.build.forbiddenApis
    api libs.build.goomph
    api libs.build.shadow

    codenarc libs.build.codenarc
    codenarc libs.build.codenarcGroovy
}

spotless {
    def common = { FormatExtension conf ->
        conf.endWithNewline()
        conf.leadingTabsToSpaces(4)
        conf.trimTrailingWhitespace()
        conf.toggleOffOn('@formatter:off', '@formatter:on')
    }
    ["groovy", "groovyGradle"].each {
        "$it"() { f ->
            common(f)
            f.importOrderFile(rootProject.file('../.spotless/configurate.importorder'))
        }
    }
}

codenarc {
    config = resources.text.fromFile(rootProject.file('../.codenarc/codenarc.groovy'))
}

sourceSets.configureEach {
    tasks.named(getTaskName('codenarc', null), CodeNarc).configure { narc ->
        narc.compilationClasspath += compileClasspath
    }
}
